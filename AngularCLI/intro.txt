Angular CLI (Command Line Interface) - інструментарій для роботи
з Angular засобами командного рядку (терміналу).
--------------
Оточення
Для виконання команд використовується NodeJS - інтерпретатор
мови JavaScript поза браузером, а також його менеджер пакетів
npm (NodeJS Package Manager)
Запускаємо термінал (Ctrl-`)
Перевіряємо наявність NodeJS
node --version
Якщо версія не виводиться, то необхідно скачати/встановити
NodeJS. Бажано LTS версію (їх номера - парні). Після 
встановлення перезапустити термінал (або IDE)
----------------
CLI
У терміналі вводимо команду 
npm install -g @angular/cli
----------------
Створення нового проєкту
Проєкт буде створено в окремій директорії, тому спочатку
слід перевести термінал у належне місце (батьківську
директорію проєктів)
cd AngularCLI 
Даємо команду створення нового проєкту "basics"
ng new basics
Якщо виконання скриптів блокується ОС, змінюємо її
конфігурацію безпеки
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
----------------
Переходимо до директорії проєкту
cd basics
Запускаємо проєкт з відкриттям у браузері
ng serve --open
-----------------
ROUTING
-----------------
Маршрутизація (routing) - аналіз URL та підбір компонента, який
за нього відповідає. Маршрутизація створює враження переходів 
між сторінками сайту, тоді як формально змінюються лише частини
однієї і тієї ж сторінки. Дана технологія називається SPA
(Single Page Application)
Основу становить RouterOutlet, конфігурація якого задається
у файлі app.routes.ts. З метою створення SPA необхідно розподілити
задачі по окремих компонентах: TrafficLightComponent, CalcComponent тощо.

1. Імпортуємо компоненти до app.routes.ts
2. Створюємо дані для маршрутів
export const routes: Routes = [     | Дані маршрутів - масив об'єктів у яких                              
    { path: "calc",                 | path: - маршрут (частина URL після домену)                   
    title: "Calculator",            | title: - надпис у вкладці браузера                        
    component: CalcComponent },     | component: - компонент, що буде підставлено до                                
    {...}                           |              <router-outlet />    
3. В app.component.ts імпортуємо
 import { RouterOutlet, RouterLink } from '@angular/router';
4. У HTML використовуємо посилання, у яких замість href вживається routerLink
   <a routerLink="calc">Калькулятор</a>
!! Маршрут - це не адреса компонента, це адреса сторінки, яка до <router-outlet /> 
   вставить відповідний компонент. 
-------------------------------
LAYOUT
-------------------------------
Шаблонізація - надання всім сторінкам сайту однакового оформлення.
Ідея - використання <router-outlet />, який оточено постійними елементами
(header, footer, container, ...)
1. Додаємо до сайту Bootstrap та іконки Bootstrap - у файл index.html 
вставляємо
 - у head 
 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
 <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

 - перед закриттям тіла
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script> 

2. Шаблонізуємо app.component.html - навколо <router-outlet /> створюємо 
постійні елементи (див app.component.html)
----------------------------------
HTTP CLIENT
----------------------------------
Для обміну даними необхідно надсилати HTTP-запити різного типу
та аналізувати їх відповіді. З цією метою впроваджується сервіс
HttpClient
1. Реєструємо постачальника цього сервісу: файл app.config.ts 
import { provideHttpClient, withFetch } from '@angular/common/http';
...
providers: [ ..., provideHttpClient( withFetch() ) ]

2. Інжектуємо об'єкт цього сервісу у конструкторі компонента
(див. currency-rates...ts)
    constructor( private http: HttpClient )

3. На відміну від AngularJS($http) HttpClient
 - може типізувати дані, одержані від серверу; для цього створюються
    TS-інтерфейси, які відповідають структурі даних, що передаються
      interface NbuRate { r030: number, txt: string,...}
    Та зазначається generic-параметр при виклику методу:
      this.http.get<Array<NbuRate>>(this.nbuUrl) - надіслати GET запит 
    на адресу this.nbuUrl та одержані дані сприймати як масив об'єктів 
    типу NbuRate
 - замість .then (який передає дані у полі .data) використовується
    .subscribe( data => ...) у якому data - це вже типізовані дані, як
    зазначено у generic-параметрі (Array<NbuRate>)
-----------------------------------------
@for(rate of rates; track rate.cc)
Angular моніторить зміни компонентів та елементів. З метою оптимізації
те, що не змінюється, також і не перерисовується.
Проблеми можуть виникати з колекціями. Якщо їх елементам не зазначаються
ключові поля (унікальні, ідентифікатори), то їм автоматично надається
порядковий номер.
Наприклад, виводиться 3 елементи А, В, С 
їм надаються індекси: 0-А, 1-В, 2-С 
Уявляємо, що елемент В був видалений з колекції. У результаті перебудови
маємо: 0-А, 1-С. Оскільки Angular моніторить "ключі" (якими є індекси),
робиться висновок про те що елементи 0 та 1 не зазнали змін, а елемент 
2 - видалено. Результат 0-А, 1-В, 2-С ==> 0-А, 1-В
тобто замість елемента В зникає елемент С
Рішення - самостійно надавати ключові поля елементам, 
a-A, b-B, c-C
тоді будь-які зміни будуть "адекватними"
Призначення елементу ключа здійснюється оператором track після якого 
слід вказати унікальні дані. 