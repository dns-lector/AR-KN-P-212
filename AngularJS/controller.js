// ініціалізація модуля
const mainApp = angular.module("mainApp", []) ;
// перший параметр - назва модуля (значення атрибуту ng-app)
// другий параметр - масив залежностей (від інших модулів)
// якщо залежностей немає, то передається порожній масив []
// !! без другого параметру angular.module("mainApp") здійснює
//    пошук раніше створеного модуля (це дозволяє відмовитись від
//    збереження const mainApp)

mainApp.controller(        // Створення (ініціалізація) контролера
    "mainController",      // Назва (значення атр. ng-controller)
    function($scope) {     // Функція ініціалізації ($scope - не змінювати)
        $scope.data1 =     // $scope - лексикографічний окіл контролера,
        "Hello, world!" ;  // створені у ньому дані доступні всім його елементам
        // інтерактив (взаємодія з околом) здійснюється за наступною схемою:
        // окіл створює функції, які змінюють дані, що належать околу.
        // З HTML відбувається виклик цих функцій, а дані, що змінюються, аналогічно
        // моделям, оновлюються автоматично (засобами спостереження Angular)
        $scope.addExclamation = function() {
            $scope.data1 += '!' ;
        }
    }
);

angular                    // Демонстрація доступу до модуля через його пошук, цей вираз 
.module("mainApp")         // абсолютно еквівалентний зверненню "mainApp.controller(...)"
.controller(               // Створення другого контролеру, в нього власний окіл, змінні
    "secondController",    // з тим самим іменем (data1) здобувають іншого значення і не
    function($scope) {     // "перетинаються" з іншими контролерами.
        $scope.data1 = "Second controller's data";
    }
)  // більшість методів працюють за "fluid interface", тобто інструкцію можна продовжувати
.controller(
    "calcController",
    function($scope) {
        $scope.num = 10;
        $scope.inc = () => $scope.num++;
        $scope.dec = () => $scope.num--;
    }
)